class MedianFinder {

    private PriorityQueue<Integer> minHeap;
    private PriorityQueue<Integer> maxHeap;
    public MedianFinder() {
        
        minHeap = new PriorityQueue<>((a,b)->(a-b));
        maxHeap = new PriorityQueue<>((a,b)->(b-a));
    }
    
    public void addNum(int num) {
        
        if(maxHeap.size() ==0 || maxHeap.peek()>=num){
            maxHeap.offer(num);
        }else{
            minHeap.offer(num);   
        }
        balance();
    }
    
    public double findMedian() {
        
        if(maxHeap.size() == minHeap.size()){
            return (minHeap.peek()+maxHeap.peek())/2.0;
        }else if(maxHeap.size()>minHeap.size()){
            return maxHeap.peek();
        }else
            return minHeap.peek();
      
    }
    
    private void balance(){
        
        if(minHeap.size()-maxHeap.size()>1){
            maxHeap.offer(minHeap.poll());
        }else if(maxHeap.size()-minHeap.size()>1){
            minHeap.offer(maxHeap.poll());            
        }
                
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 
 create minheap and max heap
 largest element in the min heap is lower then smallest element in max heap
 */
